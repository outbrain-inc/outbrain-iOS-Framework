version: 2.1

references:

  # Docker image configurations

  ios_config: &ios_config
    working_directory: ~/repo
    macos:
      xcode: "16.0"
  
  prepare_code_signing: &prepare_code_signing
    run:
      name: Set Up Code Signing
      command: |
        # Decode the base64-encoded P12 file
        echo "$CERTIFICATE_P12" | base64 --decode > certificate.p12
        # Unlock the keychain (use a custom keychain, not the login keychain)
        security create-keychain -p "" my.keychain
        security import certificate.p12 -k my.keychain -P "$CERTIFICATE_PASSWORD" -T /usr/bin/codesign
        security list-keychains -s my.keychain
        security default-keychain -s my.keychain
        security unlock-keychain -p "" my.keychain
        security set-keychain-settings -t 7200 -l my.keychain
        security list-keychains -d user
        security find-identity -p codesigning
        security set-key-partition-list -S apple-tool:,apple: -s -k '' my.keychain
      working_directory: SwiftSDK-sources

  clean_previous_sdk_artifact: &clean_previous_sdk_artifact
    run:
          name: Clean previous OutbrainSDK.xcframework
          command: |
            if [ -d OutbrainSDK.xcframework ]; then
              rm -fr OutbrainSDK.xcframework
            fi
          working_directory: Samples/OutbrainDemo

  xcodeclean_sdk_project: &xcodeclean_sdk_project
      run:
          name: Cleaning the SDK project - OutbrainSDK
          command: xcodebuild clean -target OutbrainSDK
          working_directory: SwiftSDK-sources

  # Export environment variables
  define_var_previous_release_version: &define_var_previous_release_version
    run:
      name: Export previous version number to environment variable
      command: echo "export PREVIOUS_SDK_VERSION=`cat Outbrain.swift | grep "OB_SDK_VERSION" | cut -d "=" -f2 | cut -d \" -f2`" >> $BASH_ENV
      working_directory: SwiftSDK-sources/OutbrainSDK/

  define_var_release_version: &define_var_release_version
    run:
      name: Export new version number to environment variable
      command: |
        RELEASE_VERSION=$(echo $CIRCLE_BRANCH | cut -d '/' -f2)
        MAJOR_VERSION=$(echo "$RELEASE_VERSION" | cut -d. -f1)
        BETA_RELEASE=false
        echo "RELEASE_VERSION=$RELEASE_VERSION"        
        echo "MAJOR_VERSION=$MAJOR_VERSION"
        echo "BETA_RELEASE=$BETA_RELEASE"
        echo "export RELEASE_VERSION=$RELEASE_VERSION" >> $BASH_ENV
        echo "export BETA_RELEASE=false" >> $BASH_ENV

jobs:
  ios_default:
    <<: *ios_config
    steps:
      - checkout

      - *clean_previous_sdk_artifact

      - *xcodeclean_sdk_project

      - *prepare_code_signing

      - run:
          name: Building the SDK XCFramework for release
          command: ./dynamic_framework_build.sh
          working_directory: SwiftSDK-sources

      - run:
          name: Check if framework is where we think it is
          command: |
            if [ ! -d "OutbrainSDK.xcframework" ]; then
              echo "framework is NOT where we think it is"
              exit 1
            fi
          working_directory: Samples/OutbrainDemo/

      - run:
          name: Run SDK tests
          command: fastlane sdk_tests

      - run:
          name: Build Sample Apps - Fastlane SFWebView-Prod
          command: MATCH_PASSWORD=123456  fastlane sfwebview_prod

  ios_release:
    <<: *ios_config
    steps:
      - checkout

      # Add ssh key fingerprint to tell circleci to use the key we've added in the console settings.
      - add_ssh_keys:
          fingerprints:
            - "fa:6e:50:44:11:39:30:06:6c:e2:3a:cd:ca:3c:1b:2f"

      - *define_var_previous_release_version

      - *define_var_release_version

      - run:
          name: Install jk
          command: brew install jq

      - run:
          name: Updating SDK version
          command: |
            cd scripts
            bash -x ./bump_sdk_version.sh
      - *clean_previous_sdk_artifact

      - *xcodeclean_sdk_project

      - *prepare_code_signing
          
      - run:
          name: Building the SDK XCFramework for release
          command: ./dynamic_framework_build.sh
          working_directory: SwiftSDK-sources

      - run:
          name: Check if OutbrainSDK.xcframework is where we think it is
          command: |
            if [ ! -d "OutbrainSDK.xcframework" ]; then
              echo "framework is NOT where we think it is"
              exit 1
            fi
          working_directory: Samples/OutbrainDemo/

      - run:
          name: Run SDK tests
          command: fastlane sdk_tests

      - run:
          name: Creating OBSDK-Release dir
          command: |
            mkdir OBSDK-Release
            mkdir OBSDK-Release/SDK/
            mkdir OBSDK-Release/Samples/

      - run:
          name: Copy the OutbrainSDK.xcframework and sample apps into OBSDK-Release
          command: |
            cp -a Samples/OutbrainDemo/OutbrainSDK.xcframework OBSDK-Release/SDK/
            cp -fa Samples/ OBSDK-Release/Samples/
            cp -rf README.md OBSDK-Release/

      - run:
          name: Prepare iOS-SampleApps.zip and OutbrainSDK.xcframework.zip
          command: |
            zip --symlinks -r iOS-SampleApps.zip . -x ".*" -x "*/.*" > /dev/null
            cd SDK/OutbrainSDK.xcframework
            zip --symlinks -r ../../OutbrainSDK.xcframework.zip *
          working_directory: OBSDK-Release

      - run:
          name: Add beta to $RELEASE_VERSION if BETA_RELEASE is true
          command: |
            if [ "$BETA_RELEASE" = "true" ]; then
              echo "Adding beta to $RELEASE_VERSION"
              RELEASE_VERSION="$RELEASE_VERSION-beta"
              echo "RELEASE_VERSION="$RELEASE_VERSION"
              echo "export RELEASE_VERSION="$RELEASE_VERSION" >> $BASH_ENV
            fi

      - run:
          name: Install cocoapods
          command: brew install cocoapods

      - run:
          name: Upload OutbrainSDK.xcframework.zip to GCP Storage
          command: cd scripts; bash -x ./upload_to_gcp_storage.sh ../OBSDK-Release/OutbrainSDK.xcframework.zip OutbrainSDK.xcframework.zip $RELEASE_VERSION 

      - run:
          name: Upload iOS-SampleApps.zip to GCP Storage
          command: cd scripts; bash -x ./upload_to_gcp_storage.sh ../OBSDK-Release/iOS-SampleApps.zip iOS-SampleApps.zip $RELEASE_VERSION 
          
      - run:
          name: Artifacts Paths
          command: |
            echo "*********************************************************************************************************"
            echo "* Links:                                                                                                *"
            echo "*                                                                                                       *"
            echo "* iOS SDK on GCP:                                                                                       *"
            echo "* https://storage.googleapis.com/outbrain-sdk/$RELEASE_VERSION/OutbrainSDK.xcframework.zip              *"
            echo "*                                                                                                       *"
            echo "* iOS Sample Apps on GCP:                                                                               *"
            echo "* https://storage.googleapis.com/outbrain-sdk/$RELEASE_VERSION/iOS-SampleApps.zip                       *"
            echo "*                                                                                                       *"
            echo "*********************************************************************************************************"

      - run:
          name: Update public Github repo outbrain/outbrain-iOS-Framework with new SDK version
          command: |
            echo "$RELEASE_VERSION"
            git clone git@github.com:outbrain/outbrain-iOS-Framework.git
            cd outbrain-iOS-Framework
            git config credential.helper 'cache --timeout=120'
            git config --global user.email "llemesev@outbrain.com"
            git config --global user.name "Leo Lemesev via CircleCI"
            echo "Remove the old xcframework"
            rm -fr OutbrainSDK.xcframework
            echo "Copy the new xcframework"
            cp -r ../OBSDK-Release/SDK/OutbrainSDK.xcframework .
            cat OutbrainSDK.podspec
            PREVIOUS_SDK_VERSION=`cat OutbrainSDK.podspec | grep -m 1 s.version |  cut -d "=" -f2 | cut -d \" -f2`
            echo "OutbrainSDK.podspec - replacing previous version ($PREVIOUS_SDK_VERSION) with current version ($RELEASE_VERSION)"
            sed -i '' -e "s/${PREVIOUS_SDK_VERSION}/${RELEASE_VERSION}/g" OutbrainSDK.podspec
            git status
            cat OutbrainSDK.podspec
            git add .
            git status
            git commit -m "update OutbrainSDK.xcframework to version $RELEASE_VERSION"
            git tag $RELEASE_VERSION
            if [ "$BETA_RELEASE" = "true" ]; then
              echo "This is a beta release, pushing to beta branch"
              git push origin main:ci-$RELEASE_VERSION
            else
              echo "This is NOT a beta release, pushing to main"
              git push origin main
            fi
            git push origin --tags
            # pod spec lint
            # pod trunk push OutbrainSDK.podspec


workflows:
  workflow:
    jobs:
      - ios_default

      - ios_release:
          requires:
            - ios_default
          filters:
            branches:
              only:
                - /^release/.*/
