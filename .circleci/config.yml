# Java Gradle CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-java/ for more details
#
version: 2

references:

  # Docker image configurations

  ios_config: &ios_config
    working_directory: ~/repo
    macos:
      xcode: "15.0.0"

  # Export environment variables
  define_var_previous_release_version: &define_var_previous_release_version
    run:
      name: Export previous version number to environment variable
      command: echo "export PREVIOUS_SDK_VERSION=`cat Outbrain.swift | grep "OB_SDK_VERSION" | cut -d "=" -f2 | cut -d \" -f2`" >> $BASH_ENV
      working_directory: SwiftSDK-sources/OutbrainSDK/

  define_var_release_version: &define_var_release_version
    run:
      name: Export new version number to environment variable
      command: echo "export RELEASE_VERSION=$(cut -d '/' -f2 <<< $CIRCLE_BRANCH)" >> $BASH_ENV

jobs:
  ios_default:
    <<: *ios_config
    steps:
      - checkout

      - run:
          name: Clean previous OutbrainSDK.xcframework
          command: |
            if [ -d OutbrainSDK.xcframework ]; then
              rm -fr OutbrainSDK.xcframework
            fi
          working_directory: Samples/OutbrainDemo

      - run:
          name: Cleaing the SDK project - OutbrainSDK
          command: xcodebuild clean -target OutbrainSDK
          working_directory: SwiftSDK-sources
      - run:
          name: Set Up Code Signing
          command: |
            # Decode the base64-encoded P12 file
            echo "$CERTIFICATE_P12" | base64 --decode > certificate.p12
            # Unlock the keychain (use a custom keychain, not the login keychain)
            security create-keychain -p "" my.keychain
            security import certificate.p12 -k my.keychain -P "$CERTIFICATE_PASSWORD" -T /usr/bin/codesign
            security list-keychains -s my.keychain
            security default-keychain -s my.keychain
            security unlock-keychain -p "" my.keychain
            security set-keychain-settings -t 7200 -l my.keychain
            security list-keychains -d user
            security find-identity -p codesigning
            security set-key-partition-list -S apple-tool:,apple: -s -k '' my.keychain
          working_directory: SwiftSDK-sources

      - run:
          name: Building the SDK XCFramework for release
          command: ./dynamic_framework_build.sh
          working_directory: SwiftSDK-sources

      - run:
          name: Run SDK tests
          command: |
            xcodebuild \
            -project OutbrainSDK.xcodeproj \
            -scheme OutbrainSDK \
            -destination 'platform=iOS Simulator,name=iPhone 14 Pro' \
            test
          working_directory: SwiftSDK-sources

      - run:
          name: Check if framework is where we think it is
          command: |
            if [ ! -d "OutbrainSDK.xcframework" ]; then
              echo "framework is NOT where we think it is"
              exit 1
            fi
          working_directory: Samples/OutbrainDemo/

      - run:
          name: Build Sample Apps - SFWebView-Prod
          command: |
            xcodebuild \
            -project OutbrainDemo.xcodeproj \
            -scheme SFWebView-Prod \
            -sdk iphonesimulator \
            -destination 'platform=iOS Simulator,name=iPhone 14 Pro' \
            build
          working_directory: Samples/OutbrainDemo

  ios_release:
    <<: *ios_config
    steps:
      - checkout

      # Add ssh key fingerprint to tell circleci to use the key we've added in the console settings.
      - add_ssh_keys:
          fingerprints:
            - "fa:6e:50:44:11:39:30:06:6c:e2:3a:cd:ca:3c:1b:2f"

      - *define_var_previous_release_version

      - *define_var_release_version

      - run:
          name: Install jk
          command: brew install jq

      - run:
          name: Updating SDK version
          command: |
            cd scripts
            bash -x ./bump_sdk_version.sh

      - run:
          name: Clean previous OutbrainSDK.xcframework
          command: |
            if [ -d OutbrainSDK.xcframework ]; then
              rm -fr OutbrainSDK.xcframework
            fi
          working_directory: Samples/OutbrainDemo

      - run:
          name: Cleaing the SDK project - OutbrainSDK
          command: xcodebuild clean -target OutbrainSDK
          working_directory: SwiftSDK-sources

      - run:
          name: Set Up Code Signing
          command: |
            # Decode the base64-encoded P12 file
            echo "$CERTIFICATE_P12" | base64 --decode > certificate.p12
            # Unlock the keychain (use a custom keychain, not the login keychain)
            security create-keychain -p "" my.keychain
            security import certificate.p12 -k my.keychain -P "$CERTIFICATE_PASSWORD" -T /usr/bin/codesign
            security list-keychains -s my.keychain
            security default-keychain -s my.keychain
            security unlock-keychain -p "" my.keychain
            security set-keychain-settings -t 7200 -l my.keychain
            security list-keychains -d user
            security find-identity -p codesigning
            security set-key-partition-list -S apple-tool:,apple: -s -k '' my.keychain
          working_directory: SwiftSDK-sources
          
      - run:
          name: Building the SDK XCFramework for release
          command: ./dynamic_framework_build.sh
          working_directory: SwiftSDK-sources

      - run:
          name: Check if OutbrainSDK.xcframework is where we think it is
          command: |
            if [ ! -d "OutbrainSDK.xcframework" ]; then
              echo "framework is NOT where we think it is"
              exit 1
            fi
          working_directory: Samples/OutbrainDemo/

      - run:
          name: Build Sample Apps - Journal
          command: |
            xcodebuild \
            -project OutbrainDemo.xcodeproj \
            -scheme Journal \
            -sdk iphonesimulator \
            -destination 'platform=iOS Simulator,name=iPhone 14 Pro' \
            build
          working_directory: Samples/OutbrainDemo
      
      - run:
          name: Build Sample Apps - SmartFeed
          command: |
            xcodebuild \
            -project OutbrainDemo.xcodeproj \
            -scheme SmartFeed \
            -sdk iphonesimulator \
            -destination 'platform=iOS Simulator,name=iPhone 14 Pro' \
            build
          working_directory: Samples/OutbrainDemo

      - run:
          name: Run SDK tests
          command: |
            xcodebuild \
            -project OutbrainSDK.xcodeproj \
            -scheme OutbrainSDK \
            -destination 'platform=iOS Simulator,name=iPhone 14 Pro' \
            test
          working_directory: SwiftSDK-sources

      - run:
          name: Creating OBSDK-Release dir
          command: |
            mkdir OBSDK-Release
            mkdir OBSDK-Release/SDK/
            mkdir OBSDK-Release/Samples/

      - run:
          name: Copy the OutbrainSDK.xcframework and sample apps into OBSDK-Release
          command: |
            cp -a Samples/OutbrainDemo/OutbrainSDK.xcframework OBSDK-Release/SDK/
            cp -fa Samples/ OBSDK-Release/Samples/
            cp -rf README.md OBSDK-Release/

      - run:
          name: Prepare iOS-SampleApps.zip and OutbrainSDK.xcframework.zip
          command: |
            zip --symlinks -r iOS-SampleApps.zip . -x ".*" -x "*/.*" > /dev/null
            cd SDK/OutbrainSDK.xcframework
            zip --symlinks -r ../../OutbrainSDK.xcframework.zip *
          working_directory: OBSDK-Release

      - run:
          name: Update public Github repo outbrain/outbrain-iOS-Framework with new SDK version
          command: |
            git clone git@github.com:outbrain/outbrain-iOS-Framework.git
            cd outbrain-iOS-Framework
            echo "remove the old xcframework"
            rm -fr OutbrainSDK.xcframework
            cp -r ../OBSDK-Release/SDK/OutbrainSDK.xcframework .
            cat OutbrainSDK.podspec
            PREVIOUS_SDK_VERSION=`cat OutbrainSDK.podspec | grep -m 1 s.version |  cut -d "=" -f2 | cut -d \" -f2`
            echo "OutbrainSDK.podspec - replacing previous version ($PREVIOUS_SDK_VERSION) with current version ($RELEASE_VERSION)"
            sed -i '' -e "s/${PREVIOUS_SDK_VERSION}/${RELEASE_VERSION}/g" OutbrainSDK.podspec
            git status
            cat OutbrainSDK.podspec
            git add .
            git status
            git config credential.helper 'cache --timeout=120'
            git config --global user.email "oregev@outbrain.com"
            git config --global user.name "Oded Regev via CircleCI"
            git commit -m "update OutbrainSDK.xcframework to version $RELEASE_VERSION"
            git tag $RELEASE_VERSION
            git push origin master
            git push origin --tags
            pod trunk push OutbrainSDK.podspec

      - run:
          name: Upload OutbrainSDK.xcframework.zip to GCP Storage
          command: cd scripts; bash -x ./upload_to_gcp_storage.sh ../OBSDK-Release/OutbrainSDK.xcframework.zip OutbrainSDK.xcframework.zip $RELEASE_VERSION 

      - run:
          name: Upload iOS-SampleApps.zip to GCP Storage
          command: cd scripts; bash -x ./upload_to_gcp_storage.sh ../OBSDK-Release/iOS-SampleApps.zip iOS-SampleApps.zip $RELEASE_VERSION 

      - run:
          name: Upload Custom UI
          command: bash -x ./scripts/update_custom_ui.sh $RELEASE_VERSION

      - run:
          name: Update developer docs Github repo outbrain/developer-docs with new SDK version
          command: |
            echo "$RELEASE_VERSION"
            git clone git@github.com:outbrain/developer-docs.git
            cd developer-docs
            PREVIOUS_VERSION=`cat docs/iOS-SDK/release-notes.md | grep -m 1 "##" | grep -oE '[0-9]+\.[0-9]+\.[0-9]+' | awk '{print $1}'`
            echo "download-links.mdx - replacing previous version ($PREVIOUS_VERSION) with current version ($RELEASE_VERSION)"
            sed -i '' -e "s/${PREVIOUS_VERSION}/${RELEASE_VERSION}/g" docs/iOS-SDK/Getting-Started/download-links.mdx
            git status
            cat docs/iOS-SDK/Getting-Started/download-links.mdx
            echo "release-notes.md - add the new version ($RELEASE_VERSION)"
            # Header content to prepend to NEW.md
            HEADER="---
            sidebar_position: 7
            ---
            "
            echo -e "$HEADER\n$(cat ../release-notes.md)" > docs/iOS-SDK/release-notes.md 
            cat docs/iOS-SDK/release-notes.md 
            git add .
            git status
            git config credential.helper 'cache --timeout=120'
            git config --global user.email "oregev@outbrain.com"
            git config --global user.name "Oded Regev via CircleCI"
            git commit -m "update developer-docs to version $RELEASE_VERSION"
            git tag $RELEASE_VERSION
            git push origin main
            git push origin --tags

      - run:
          name: Artifacts Paths
          command: |
            echo "*********************************************************************************************************"
            echo "* Links:                                                                                                *"
            echo "*                                                                                                       *"
            echo "* iOS SDK on GCP:                                                                                       *"
            echo "* https://storage.googleapis.com/outbrain-sdk/$RELEASE_VERSION/OutbrainSDK.xcframework.zip              *"
            echo "*                                                                                                       *"
            echo "* iOS Sample Apps on GCP:                                                                               *"
            echo "* https://storage.googleapis.com/outbrain-sdk/$RELEASE_VERSION/iOS-SampleApps.zip                       *"
            echo "*                                                                                                       *"
            echo "* iOS Custom UI on GCP:                                                                                 *"
            echo "* https://storage.googleapis.com/outbrain-sdk/$RELEASE_VERSION/Custom-UI-iOS-SDK-Smartfeed.zip          *"
            echo "*                                                                                                       *"
            echo "*********************************************************************************************************"


workflows:
  version: 2
  workflow:
    jobs:
      - ios_default:
          filters:
            branches:
              ignore: /^release/.*/

      - ios_release:
          filters:
            branches:
              only:
                - /^release/.*/
